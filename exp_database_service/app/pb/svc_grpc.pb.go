// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: svc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExpServiceClient is the client API for ExpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpServiceClient interface {
	AddData(ctx context.Context, in *AddDataParameter, opts ...grpc.CallOption) (*AddDataResponse, error)
	QueryData(ctx context.Context, in *QueryDataParamerter, opts ...grpc.CallOption) (*QueryDataResponse, error)
}

type expServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpServiceClient(cc grpc.ClientConnInterface) ExpServiceClient {
	return &expServiceClient{cc}
}

func (c *expServiceClient) AddData(ctx context.Context, in *AddDataParameter, opts ...grpc.CallOption) (*AddDataResponse, error) {
	out := new(AddDataResponse)
	err := c.cc.Invoke(ctx, "/pb.ExpService/AddData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expServiceClient) QueryData(ctx context.Context, in *QueryDataParamerter, opts ...grpc.CallOption) (*QueryDataResponse, error) {
	out := new(QueryDataResponse)
	err := c.cc.Invoke(ctx, "/pb.ExpService/QueryData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpServiceServer is the server API for ExpService service.
// All implementations must embed UnimplementedExpServiceServer
// for forward compatibility
type ExpServiceServer interface {
	AddData(context.Context, *AddDataParameter) (*AddDataResponse, error)
	QueryData(context.Context, *QueryDataParamerter) (*QueryDataResponse, error)
	mustEmbedUnimplementedExpServiceServer()
}

// UnimplementedExpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExpServiceServer struct {
}

func (UnimplementedExpServiceServer) AddData(context.Context, *AddDataParameter) (*AddDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddData not implemented")
}
func (UnimplementedExpServiceServer) QueryData(context.Context, *QueryDataParamerter) (*QueryDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryData not implemented")
}
func (UnimplementedExpServiceServer) mustEmbedUnimplementedExpServiceServer() {}

// UnsafeExpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpServiceServer will
// result in compilation errors.
type UnsafeExpServiceServer interface {
	mustEmbedUnimplementedExpServiceServer()
}

func RegisterExpServiceServer(s grpc.ServiceRegistrar, srv ExpServiceServer) {
	s.RegisterService(&ExpService_ServiceDesc, srv)
}

func _ExpService_AddData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDataParameter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpServiceServer).AddData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExpService/AddData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpServiceServer).AddData(ctx, req.(*AddDataParameter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpService_QueryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDataParamerter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpServiceServer).QueryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ExpService/QueryData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpServiceServer).QueryData(ctx, req.(*QueryDataParamerter))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpService_ServiceDesc is the grpc.ServiceDesc for ExpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ExpService",
	HandlerType: (*ExpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddData",
			Handler:    _ExpService_AddData_Handler,
		},
		{
			MethodName: "QueryData",
			Handler:    _ExpService_QueryData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc.proto",
}
